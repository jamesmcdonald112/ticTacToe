type: edu
custom_name: First move!
files:
  - name: src/tictactoe/Main.java
    visible: true
    text: |
      package tictactoe;
      
      public class Main {
          public static void main(String[] args) {
              // write your code here
          }
      }
    learner_created: false
  - name: test/TicTacToeTest.java
    visible: false
    text: |
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testcase.TestCase;
      
      import java.util.ArrayList;
      import java.util.List;
      import java.util.stream.Collectors;
      
      enum FieldState {
          X, O, FREE;
      
          static FieldState get(char symbol) {
              switch (symbol) {
                  case 'X': return X;
                  case 'O': return O;
                  case ' ':
                  case '_':
                      return FREE;
                  default: return null;
              }
          }
      }
      
      class TicTacToeField {
      
          final FieldState[][] field;
      
          TicTacToeField(FieldState[][] field) {
              this.field = new FieldState[3][3];
              for (int row = 0; row < 3; row++) {
                  System.arraycopy(field[row], 0, this.field[row], 0, 3);
              }
          }
      
          TicTacToeField(String str) {
              field = new FieldState[3][3];
              for (int row = 0; row < 3; row++) {
                  for (int col = 0; col < 3; col++) {
                      field[row][col] = FieldState.get(str.charAt(row * 3 + col));
                  }
              }
          }
      
          boolean equalTo(TicTacToeField other) {
              for (int i = 0; i < 3; i++) {
                  for (int j = 0; j < 3; j++) {
                      if (field[i][j] != other.field[i][j]) {
                          return false;
                      }
                  }
              }
              return true;
          }
      
          boolean hasNextAs(TicTacToeField other) {
              boolean improved = false;
              for (int i = 0; i < 3; i++) {
                  for (int j = 0; j < 3; j++) {
                      if (field[i][j] != other.field[i][j]) {
                          if (field[i][j] == FieldState.FREE && !improved) {
                              improved = true;
                          }
                          else {
                              return false;
                          }
                      }
                  }
              }
              return improved;
          }
      
          boolean isCloseTo(TicTacToeField other) {
              return equalTo(other)
                  || hasNextAs(other)
                  || other.hasNextAs(this);
          }
      
          static TicTacToeField parse(String fieldStr) {
      
              try {
                  List<String> lines = fieldStr
                      .lines()
                      .map(String::strip)
                      .filter(e ->
                          e.startsWith("|")
                              && e.endsWith("|"))
                      .collect(Collectors.toList());
      
                  for (String line : lines) {
                      if (line.length() != 9) {
                          throw new WrongAnswer("Line of Tic-Tac-Toe " +
                              "field should be 9 characters long\n" +
                              "found " + line.length() + " characters in \"" + line + "\"");
                      }
                      for (char c : line.toCharArray()) {
                          if (c != 'X'
                              && c != 'O'
                              && c != '|'
                              && c != ' '
                              && c != '_') {
                              return null;
                          }
                      }
                  }
      
                  FieldState[][] field = new FieldState[3][3];
      
                  int y = 0;
                  for (String line : lines) {
                      char[] cols = new char[] {
                          line.charAt(2),
                          line.charAt(4),
                          line.charAt(6)
                      };
      
                      int x = 0;
                      for (char c : cols) {
                          FieldState state = FieldState.get(c);
                          if (state == null) {
                              return null;
                          }
                          field[y][x] = state;
                          x++;
                      }
                      y++;
                  }
      
                  return new TicTacToeField(field);
              } catch (Exception ex) {
                  return null;
              }
          }
      
      
          static List<TicTacToeField> parseAll(String output) {
              List<TicTacToeField> fields = new ArrayList<>();
      
              List<String> lines = output
                  .lines()
                  .map(String::strip)
                  .filter(e -> e.length() > 0)
                  .collect(Collectors.toList());
      
              String candidateField = "";
              boolean insideField = false;
              for (String line : lines) {
                  if (line.contains("----") && !insideField) {
                      insideField = true;
                      candidateField = "";
                  } else if (line.contains("----") && insideField) {
                      TicTacToeField field = TicTacToeField.parse(candidateField);
                      if (field != null) {
                          fields.add(field);
                      }
                      insideField = false;
                  }
      
                  if (insideField && line.startsWith("|")) {
                      candidateField += line + "\n";
                  }
              }
      
              return fields;
          }
      
      }
      
      
      class Clue {
          int x, y;
          String input;
          Clue(String input, int x, int y) {
              this.input = input;
              this.x = x;
              this.y = y;
          }
      }
      
      public class TicTacToeTest extends StageTest<Clue> {
      
          static final String[] inputs = new String[] {
              "1 1", "1 2", "1 3",
              "2 1", "2 2", "2 3",
              "3 1", "3 2", "3 3"
          };
      
          String iterateCells(String initial) {
              int index = -1;
              for (int i = 0; i < inputs.length; i++) {
                  if (initial.equals(inputs[i])) {
                      index = i;
                      break;
                  }
              }
              if (index == -1) {
                  return "";
              }
              String fullInput = "";
              for (int i = index; i < index + 9; i++) {
                  fullInput += inputs[i % inputs.length] + "\n";
              }
              return fullInput;
          }
      
          @Override
          public List<TestCase<Clue>> generate() {
      
              List<TestCase<Clue>> tests = new ArrayList<>();
      
              int i = 0;
      
              for (String startField : new String[] {
                  "_XXOO_OX_",
                  "_________",
                  "X_X_O____"
              }) {
      
                  for (String input : inputs) {
                      String fullInput = iterateCells(input);
      
                      String[] strNums = input.split("\\s+");
                      int x = Integer.parseInt(strNums[0]);
                      int y = Integer.parseInt(strNums[1]);
      
                      if (i % 2 == 1) {
                          // mix with incorrect data
                          fullInput = "4 " + i + "\n" + fullInput;
                      }
      
                      tests.add(new TestCase<Clue>()
                          .setInput(startField + "\n" + fullInput)
                          .setAttach(new Clue(startField, x, y)));
      
                      i++;
                  }
      
              }
      
              return tests;
          }
      
          @Override
          public CheckResult check(String reply, Clue clue) {
      
              List<TicTacToeField> fields = TicTacToeField.parseAll(reply);
      
              if (fields.size() != 2) {
                  return new CheckResult(false,
                      "Can't find two fields inside output");
              }
      
              TicTacToeField curr = fields.get(0);
              TicTacToeField next = fields.get(1);
      
              TicTacToeField correctCurr = new TicTacToeField(clue.input);
              TicTacToeField correctNext = new TicTacToeField(correctCurr.field);
      
              String[] numInputs = iterateCells(clue.x + " " + clue.y).split("\n");
              for (String input : numInputs) {
                  String[] strNums = input.split(" ");
                  int x = Integer.parseInt(strNums[0]);
                  int y = Integer.parseInt(strNums[1]);
                  if (correctNext.field[x - 1][y - 1] == FieldState.FREE) {
                      correctNext.field[x - 1][y - 1] = FieldState.X;
                      break;
                  }
              }
      
              if (!curr.equalTo(correctCurr)) {
                  return new CheckResult(false,
                      "The first field is not equal to the input field");
              }
      
              if (!next.equalTo(correctNext)) {
                  return new CheckResult(false,
                      "The first field is correct, but the second is not");
              }
      
              return CheckResult.correct();
          }
      }
    learner_created: false
  - name: src/tictactoe/UserInput.java
    visible: true
    text: |
      package tictactoe;
      
      import java.util.Scanner;
      
      
      public class UserInput {
          // INSTANCE VARIABLES
          private static final Scanner scanner = new Scanner(System.in);
      
          /**
           * Gets the input from the user using scanner.
           *
           * @return The user input as a String
           */
          public static String getUserInput() {
              return scanner.nextLine();
          }
      
      
      
      }
    learner_created: true
  - name: src/tictactoe/MatrixCreator.java
    visible: true
    text: |
      package tictactoe;
      
      import java.util.Arrays;
      
      public class MatrixCreator {
      
          /**
           * Takes in a String input and returns a char[3][3] matrix of the user input.
           *
           * @param input The String to be converted to a char[][] matrix
           * @return The char[][] matrix
           */
          public static char[][] createMatrix(String input) {
              // Create a matrix of size 3 * 3
              char[][] matrix = new char[3][3];
              // Track the string index
              int stringIndex = 0;
              // Iterate over each row
              for (int row = 0; row < matrix.length; row++) {
                  // Iterate over each column
                  for (int col = 0; col < matrix[row].length; col++) {
                      // Add the user input one at a time
                      matrix[row][col] = input.charAt(stringIndex);
                      stringIndex++;
                  }
              }
              return matrix;
          }
      
      }
    learner_created: true
  - name: src/tictactoe/CreateTable.java
    visible: true
    text: |
      package tictactoe;
      
      public class CreateTable {
      
          /**
           * Takes first, second, and third row of the current game can creates a formatted table.
           * Dashes are added above and below, pipes are added on either side on the table and the
           * characters a spaced out from each other.
           *
           * @param firstLine The first line of the table to be formatted
           * @param secondLine The first line of the table to be formatted
           * @param thirdLine The first line of the table to be formatted
           * @return The formatted table
           */
          public static String createFormattedTable(String firstLine, String secondLine, String thirdLine) {
              // Create table variable
              StringBuilder table = new StringBuilder();
      
              // Format lines
              String formattedFirstLine = formatLineWithPipes(firstLine);
              String formattedSecondLine = formatLineWithPipes(secondLine);
              String formattedThirdLine = formatLineWithPipes(thirdLine);
      
              // Add to StringBuilder
              table.append(dashes());
              table.append(formattedFirstLine);
              table.append(formattedSecondLine);
              table.append(formattedThirdLine);
              table.append(dashes());
              return table.toString();
      
          }
      
      
          /**
           * Creates and returns a String of dashed lines
           *
           * @return A string of dashes
           */
          private static String dashes() {
              return "---------\n";
          }
      
          /**
           * Takes in a line of characters and returns a String or formatted characters between two pipes
           *
           * @param lineInput The line to be formatted
           * @return The formatted line
           */
          private static String formatLineWithPipes(String lineInput) {
              // Characters to be formatted
              char first = lineInput.charAt(0);
              char second = lineInput.charAt(1);
              char third = lineInput.charAt(2);
      
              return String.format("| %c %c %c |\n", first, second, third);
          }
      
      
      }
    learner_created: true
  - name: src/tictactoe/AnalyseGame.java
    visible: true
    text: |-
      package tictactoe;
      
      public class AnalyseGame {
      
          /**
           * Analyses the state of the game and provides feedback for the user:
           *
           * - Impossible: The game has a state that has broken rules such as two winners or one player
           * has many more entries than the other
           * - X wins: Player 'X' wins
           * - O wins: Player 'O' wins
           * - Draw: The table is filled but there is no winner
           * - Game not finished: The game is still in play
           *
           * @param table The table to be analysed
           * @return A String with the state of the game.
           */
          public static String analyseGame(char[][] table) {
              if (impossible(table)) {
                  return "Impossible";
              } else if (xWins(table)) {
                  return "X wins";
              } else if (oWins(table)) {
                  return "O wins";
              } else if (Draw(table)) {
                  return "Draw";
              } else {
                  return "Game not finished";
              }
          }
      
          /**
           * Checks if the state of the game is braking the rules, such as two winners or one player
           * has many more entries than the other.
           *
           * @param table The table to be checked
           * @return True if it is impossible, false otherwise
           */
          private static boolean impossible(char[][] table) {
              // If both 'X' and 'O' have three in a row, that is not a possible outcome
              if (isWinner(table, 'X') && isWinner(table, 'O')) {
                  return true;
              }
      
              int countX = 0;
              int countO = 0;
      
              // Iterate through the whole table
              for (int row = 0; row < table.length; row++) {
                  for (int col = 0; col < table[row].length; col++) {
                      if (table[row][col] == 'X') {
                          countX++;
                      } else if (table[row][col] == 'O') {
                          countO++;
                      }
      
                  }
              }
      
              // If there are more than 1 symbols in the difference, then this is impossible
              if (Math.abs(countX - countO) > 1) {
                  return true;
              }
      
              return false;
          }
      
          /**
           * Checks the state of the game to see if it is a draw. It does so my seeing if the table is
           * filled with 'X's and 'O's without a winner.
           *
           * @param table The table to be checked
           * @return True if it is a draw; false otherwise
           */
          private static boolean Draw(char[][] table) {
              boolean isFull = true;
              boolean hasWinner;
              for (int row = 0; row < table.length; row++) {
                  for (int col = 0; col < table[row].length; col++) {
                      if (table[row][col] == ' ' || table[row][col] == '_') {
                          isFull = false;
                      }
                  }
              }
      
              hasWinner = isWinner(table, 'X') || isWinner(table, 'O');
      
              return isFull && !hasWinner;
          }
      
          /**
           * Checks to see ig player 'O' wins
           *
           * @param table The table to check
           * @return True if 'O' wins; false otherwise
           */
          private static boolean oWins(char[][] table) {
              return isWinner(table, 'O');
          }
      
          /**
           * Checks to see ig player 'X' wins
           *
           * @param table The table to check
           * @return True if 'X' wins; false otherwise
           */
          private static boolean xWins(char[][] table) {
              return isWinner(table, 'X');
          }
      
          /**
           * Using the helper methods for finding a winner, this method takes in a table and a symbol
           * to check if that symbol is a winner.
           *
           * @param table The table to be checked
           * @param symbol The symbol to check in each method
           * @return True if the symbol is found three time consecutively, false otherwise.
           */
          private static boolean isWinner(char[][] table, char symbol) {
              return threeInARow(table, symbol) ||
                      threeInACol(table, symbol) ||
                      threeDiagonalBottomLeft(table, symbol) ||
                      threeDiagonalTopLeft(table, symbol);
          }
      
          /**
           *
           * @param table The table of 'X's and 'O's to be checked
           * @param symbol Represents the 'X' or the 'O' to be checked
           * @return True if there is three of the chosen symbol in a row, false otherwise
           */
          private static boolean threeInARow(char[][] table, char symbol) {
              int consecutive;
      
              for (int row = 0; row < table.length; row++) {
                  // Each time a new row starts, start the consecutive count again.
                  consecutive = 0;
                  for (int col = 0; col < table[row].length; col++) {
      
                      if (table[row][col] == symbol) {
                          consecutive++;
                      } else {
                          // If the next symbol is not consecutive, set consecutive to O
                          consecutive = 0;
                      }
                      // If there is
                      // three in a row, return true
                      if (consecutive == 3) return true;
                  }
              }
              return false;
          }
      
          /**
           * Checks for three in each column and returns true if found, false otherwise.
           *
           * @param table The table to be checked for the symbol 3 times consecutively.
           * @param symbol The symbol to be checked for
           * @return True if the symbol is found 3 times consecutively, false otherwise.
           */
          private static boolean threeInACol(char[][] table, char symbol) {
              int consecutive;
              for (int col = 0; col < table[0].length; col++) {
                  // Rest consecutive if checking a new column
                  consecutive = 0;
                  // Check each column
                  for (int row = 0; row < table.length; row++) {
                      if (table[row][col] == symbol) {
                          consecutive++;
                      } else {
                          // Reset consecutive if the symbol is not found
                          consecutive = 0;
                      }
                      // Return true if three in a row.
                      if (consecutive ==3) return true;
                  }
              }
              return false;
          }
      
          /**
           * Checks for three symbols in a row diagonally from top left to bottom right.
           *
           * @param table The table to check for the three symbols
           * @param symbol The symbol to be checked for
           * @return True if three consecutive symbols are found, false otherwise.
           */
          private static boolean threeDiagonalTopLeft(char[][] table, char symbol) {
              int consecutive = 0;
      
              // Index is the same for the row and column
              for (int i = 0; i < table.length; i++) {
                  if (table[i][i] == symbol) {
                      consecutive++;
                  } else {
                      // Reset consecutive if the symbol does not match
                      consecutive = 0;
                  }
              }
      
              return consecutive == 3;
          }
      
          /**
           * Iterates from top right to bottom left of the matrix to check for 3 consecutive symbols.
           *
           * @param table The table to be checked
           * @param symbol The symbol checked for
           * @return True if three consecutive symbols, false otherwise.
           */
          private static boolean threeDiagonalBottomLeft(char[][] table, char symbol) {
              int consecutive = 0;
      
      
              for (int i = 0; i < table.length; i++) {
                  // length of the table - 1 (as we index from 0) then minus the i to move backwards.
                  if (table[table.length - 1- i][i] == symbol) {
                      consecutive++;
                  } else {
                      consecutive = 0;
                  }
              }
              return consecutive == 3;
          }
      
      
      }
    learner_created: true
  - name: src/tictactoe/PlayGame.java
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/5400#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Thu, 04 Jul 2024 10:44:57 UTC"
record: 4
